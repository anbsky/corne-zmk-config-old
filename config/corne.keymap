/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER    1
#define RAISE    2
#define ADJUST  3
#define NAVI  4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <4 15 17 27 29 38>;
        };

        ptr: positional_hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
        
        td_lbkt: tap_dance_lbkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LBKT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N>, <&kp LBKT>;
        };

        td_rbkt: tap_dance_rbkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_RBKT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp M>, <&kp RBKT>;
        };
    };

    combos {
		compatible = "zmk,combos";
        combo_grave_navi {
            timeout-ms = <50>;
            key-positions = <29 37>;
            bindings = <&mo NAVI>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |             |  Y  |  U   |  I  |  O  |  P  | BSPC |
// |  TAB |  A  |  S  |  D  |  F  |  G  |             |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |             |  N  |  M   |  ,  |  .  |  /  |   \  |
//                    | CMD | RSE | SPC |             | RET | LWR  |CTRL |
                        bindings = <
   &gresc       &kp Q        &kp W       &kp E       &kp R        &kp T          &kp Y    &kp U        &kp I       &kp O       &kp P           &kp BSPC
   &qt BSPC TAB &pht LCTRL A &pht LALT S &pht LCMD D &pht LSHFT F &kp G          &kp H    &ptr RSHFT J &ptr RCMD K &ptr RALT L &ptr RCTRL SEMI &kp SQT
   &kp LSHFT    &kp Z        &kp X       &kp C       &kp V        &kp B          &td_lbkt &td_rbkt     &kp COMMA   &kp DOT     &kp FSLH        &kp BSLH
                                         &kp LGUI    &mo RAISE    &kp SPACE      &kp RET  &mo LOWER    &kp RCTRL
                        >;
                };

                lower_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2   |   3   |   4    |  5     |                               		        |  6   |   7   |    8   |   9    |   0    |  ESC  |
// | LCTRL |  -  |  &   |   !   |   =    |  _     |                                             |  _   | LEFT  | DOWN   |  UP    | RIGHT  |   -   |
// | SHIFT |  [  |  ]   |   *   |   {    |  }     |                                             | VOL- | VOL+  |  ,     |   .    |   >||  |  MUTE |
//                      |       |        |   DEL  |                                             | PGDN |  LWR  |  PGUP  |  
			            bindings = <
	&kp ESC   &kp N1    &kp N2   &kp N3   &kp N4   &kp N5             &kp N6       &kp N7       &kp N8     &kp N9         &kp N0    &kp ESC
	&kp LCTRL &kp MINUS &kp AMPS &kp EXCL &kp EQL  &kp UNDER          &kp UNDER    &kp LEFT     &kp DOWN   &kp UP         &kp RIGHT &kp MINUS
	&kp LSHFT &kp LBKT  &kp RBKT &kp STAR &kp LBRC &kp RBRC           &kp C_VOL_DN &kp C_VOL_UP &kp KP_DOT &kp LS(KP_DOT) &kp C_PP  &kp C_MUTE
                                     &trans &trans &kp DEL            &kp PG_DN    &trans       &kp PG_UP
		            	>;
		        };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | GRAVE |  !  |  @   |   #   |   $    |  %    |                         |       |   7  |   8   |   9  |      |   _   |
// | BSPC  |  (  |  &   |   ^   |   =    |  )    |                         |       |   4  |   5   |   6  |      |   -   |
// | SHIFT |  [  |  ]   |   *   |   {    |  }    |                         |    0  |   1  |   2   |   3  |      | RSHFT |
//                      |       |        |   DEL |                         |  ENT  |      |       |
                        bindings = <
	&kp GRAVE &kp EXCL  &kp AT    &kp HASH  &kp DLLR &kp PRCNT             &none   &kp N7 &kp N8 &kp N9 &trans &kp UNDERSCORE
	&kp BSPC  &kp LPAR  &kp AMPS  &kp CARET &kp EQL  &kp RPAR              &none   &kp N4 &kp N5 &kp N6 &trans &kp MINUS
	&kp LSHFT &kp LBKT  &kp RBKT  &kp STAR  &kp LBRC &kp RBRC              &kp N0  &kp N1 &kp N2 &kp N3 &trans &kp RSHFT
                    	          &trans    &trans   &kp DEL               &kp KP_ENTER &trans &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | GRAVE |  @  |  &  |  {  |  }  |  *  |                  | BT+ |      |      |      |     | BTCLR |
// | BSPC  |  $  |  %  |  (  |  )  |  =  |                  | BT- |  MUT | VDN  | VUP  |     |       |
// | SHFT  |  ^  |  #  |  [  |  ]  |  !  |                  | BT0 |  BT1 |  BT2 |  BT3 |     |       |
//                     | CMD |     | SPC |                  |     |      |      |
                        bindings = <
	&kp ESC   &trans &trans &trans &trans &trans                 &bt BT_NXT   &none        &none        &none        &none &bt BT_CLR
	&kp LCTRL &trans &trans &trans &trans &trans                 &bt BT_PRV   &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &none &none
		&kp LSHFT &trans &trans &trans &trans &trans             &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none &none
                    	         &trans &trans &trans            &trans &trans &trans
                        >;
                };
        };
};
